React Tutorial by Akshay Saini

Episode 1:
  - hello world in HTML -> JS -> React (via cdn)
  React createElement, ReactDOM createRoot -> returns react objects
  render() processes these objects & returns html understandable by browser

Episode 2: npm, React (npm), Parcel
  - tree shaking
  - local server
  - dev build
  - HMR (Hot Module Replacement)
  - File Watching Algorithm
  - Caching (faster builds)
  - Image optimization
  - Minification
  - Bundling
  - Compress
  - consistent hashing
  - code splitting
  - Differentiate building (Support for older browsers)
  - HTTPS server
  - etc etc

Episode 3:
  - part 1: scripts to start dev server, build prod
    npx parcel index.html = npm run start = npm start (start is reserved word)
    npx parcel build index.html == npm run build != npm build
  - part 2: render() function
  - part 3:
      - JSX (HTML like syntax, but not html in JS), different from React.
      - return from createElement same as JSX statement
      - Redo Episode 1 using JSX
      - babel converts(transpiles) JSX code to React's create component
  - part 4:
    - React Element vs component
    - React Components: ClassBased (old) & Functional Components (new)
    - Function Components: Returns JSX
    - Redo Episode 1 using React Component
    - Component Composition (component inside component)
  - part 5:
    - JS inside JSX (JS Expressions)
    - React Element inside React Element
    - React Element inside React Component
    - React Component inside React Component
    - React Component inside React Element
    - JSX handles XSS (Cross Site Scripting), by sanitizing the data passed to JSX, i.e. within {}
    - ALl below are similar Inside JSX
      const Title = () => (
        <h1 id="heading">Hello world</h1>
      )
      - {Title()}
      - <Title />
      - <Title></Title>

Episode 4: Food delivery app
  - part 1: Planning/Design wireframe, base implementation, All restaurants cards same
  - part 2: ConfigDrivenUI, different Swiggy UI for Bengaluru, Delhi, Hyderabad etc (use map, key)

Episode 5: Code restructuring
  - part 1: Directory structure. js & jsx extension same. default & named export/import.
  - part 2: Hooks
    - Purpose of most of the UI frameworks is to keep UI & Data layer in sync.
      i.e. update UI on data change.
    - DOM -> HTML structure. (ex: <div><img /></div>)
    - VirtualDom -> JS representation of actual DOM
    - React -> Efficiently re-renders the DOMs. Good & efficient at DOM manipulation.
    - Properties:
      - Reconciliation Alg (React Fiber): concepts -> virtual DOM, Diff Alg
    - useState(): returns an arr (2), set to trigger ReactFiber on change

Episode 6: UI interaction with other services (external world)
  - part 1: Monolith VS Micro
  - part 2: useEffect(), Use Swiggy API. render -> Load skeleton -> API call -> re-render
  - part 3: Shimmer UI (change Loading to Empty cards)
  - part 5: login <=> logout switching (useState)
  - part 6: Search box

Episode 7: Routing
  - part 1: useEffect dependency param is optional. If not provided, useEffect is called on every render.
            If empty array, called once, on first render
  - part 2: router config/setup
  - part 3: About & Contact route & Page. useRouteError hook
  - part 4: Children routes. outlet react component. link for anchor tag redirection without page refresh
            Hence single page. On re-routing the components are re-arraged. Or loads appropriate component
          - Routing types -> (server & client) routing
  - part 5: Dynamic routing (restaurant page with dishes)